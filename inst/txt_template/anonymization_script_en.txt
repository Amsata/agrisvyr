#'*|----------------------------------------------------------------------------|*
#'*|--| Anonymization of {addSpace(agrisvy@svyName,26)}
#'*|--| Author: {addSpace(agrisvy@author,17)}
#'*|--| Date: {addSpace(Sys.Date(),20)}
#'*|----------------------------------------------------------------------------|*
#'*|--| Dataset: {addSpace(file_attributes$msg,18)}
#'*|----------------------------------------------------------------------------|*

rm(list = ls()) # Clear the variables environment

library(sdcMicro)
library(agrisvyr)
library(dplyr)
library(tidyr)
library(readxl)
library(haven)
library(questionr)
library(labelled)

# Load the agrisvy object and all other files/functions in the folder "_R"
purrr::walk(file.path("_R",list.files(path="_R",pattern = ".R$")),source)

sdcMessage("{file_attributes$msg}")

#******************** Load microdata to be anonymized **************************
inputdata={file_attributes$read_function}("{file_attributes$path}")

# **************** Load variable classification Excel file *********************
variable_classification=read_excel(path="{file_attributes$xlsx_var_class}", sheet ="{file_attributes$file_name}") %>% select(Name:Questions)

# ********************* Load variable labels Excel file ************************
variable_labels=read_excel(path="{file_attributes$xlsx_var_labels}",sheet ="{file_attributes$file_name}")

# Extracting quasi-identifiers (Q), linked (L) and sensitive (S) variables
ano_variable=variable_classification %>% filter(Classification %in% c("Q","L","S")) %>% pull(Name)
ano_variable=ano_variable[!is.na(ano_variable)]

# Displaying quasi-identifiers (Q), linked (L) and sensitive (S) variables
print(ano_variable)

#TO DO: the following part must be customize according to the dataset to be anonymized

# few preprocessing if needed
#keyvars=c("keyvar1","keyvar2","etc.")
#inputdata=inputdata %>% dplyr::mutate(across(all_of(keyvars),to_factor))
#inputdata=inputdata %>% dplyr::mutate(HHID=to_factor(HHID))

sdc_obj=createSdcObj(
  dat=testdata2,
  keyVars=c("urbrur","roof","walls","water","electcon","relat","sex"),
  numVars = NULL,
  pramVars = NULL,
  ghostVars = NULL,
  weightVar = "sampling_weight",
  hhId = NULL,
  strataVar = NULL,
  sensibleVar = NULL,
  excludeVars = NULL,
  options = NULL,
  seed = 0,
  randomizeRecords = FALSE,
  alpha = 1
)

# Saving the initial SDC object. It may be used in the sdc report
sdc_initial=sdc_obj

#*******************************************************************************
#**************** Statistical Disclosure  risk analysis ************************
#*******************************************************************************

# Global risk
print(sdc_obj,"risk")

# K-anonymity
print(sdc_obj)

# risk probabilist
#hist(sdc_obj@risk$individual)
#summary(sdc_obj@risk$individual)

# Computing risk SUDA
#sdc_obj=suda2(sdc_obj)
#print(sdc_obj,"suda2")

#*******************************************************************************
#****************** Statistical Disclosure  Control ****************************
#*******************************************************************************

# Categorical quais-identifiers

# sdc_obj=groupAndRename(sdc_obj, var="keyvars", before=c(), after=c(), addNA = FALSE)
# sdc_obj=localSuppression(sdc_obj, k = 2, importance = NULL, combs = NULL)
# sdc_obj=localSupp(sdc_obj, threshold = 0.15, keyVar)

# Continous quasi-identifiers

#sdc_obj=topBotCoding(sdc_obj, value, replacement, kind = "top", column = NULL)
#sdc_obj=microaggregation(sdc_obj,variables = NULL,aggr = 3,strata_variables = NULL,method = "mdav",weights = NULL,nc = 8,clustermethod = "clara",measure = "mean",trim = 0,varsort = 1,transf = "log")
#sdc_obj=addNoise(sdc_obj, variables = NULL, noise = 150, method = "additive", ...)
#sdc_obj=rankSwap(sdc_obj,variables = NULL,TopPercent = 5,BottomPercent = 5,K0 = NULL,R0 = NULL,P = NULL,missing = NA,seed = NULL)

#*******************************************************************************
#*********************** Extract anonymized data *******************************
#*******************************************************************************

#ano_data=extractManipData(sdc_obj)

#putting back labels in case they have been removed during processing, like mutate etc.
#ano_data=ano_data %>% agrisvyr::assignNewVarLabels(variable_labels)

#*******************************************************************************
#************************* Update the SDC report *******************************
#*******************************************************************************

# Saving the final sdc report. It might be used in the sdc report and the
# information loss report
sdc_final=sdc_obj

#saveReprtObj(
#  agrisvy={obj_name},
#  intialObj = sdc_initial,
#  finalObj = sdc_final,
#  unit = "household",
#  hierarchy = NULL,
#  global = TRUE,
#  individual = TRUE,
#  suda = FALSE,
#  hierarchical = FALSE,
#  childName = "child_hh",
# inputdata="{agrisvy@workingDir}/{file_attributes$path}"
#)

#*******************************************************************************
#************************* saving anonymized data ******************************
#*******************************************************************************

{file_attributes$write_function}(inputdata,"{file_attributes$to_save}")
