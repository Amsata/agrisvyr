---
title: "{{agrisvy@wkspName}}"
title-block-banner: true
subtitle: "{{agrisvy@subtitle}}"
author: "{{agrisvy@organizer}}"
abstract: |
  This is the abstract.
format: pdf
editor: visual
---

# Anonymisation de la base {{file_attributes$msg}}

A l'issue de l'analyse du risque de divulgation, au cas où le niveau du risque est jugé élevé, il faudra appliquer des méthodes de control de divulgation pour réduire le risk.

Les méthodes classiques peuvent être classé en deux catégories:

+ Les méthodes non-probabilistes (réduisent le niveau de détails dans le jeu de données)
  -recodage global, codage au top ou en bas, suppressions locales, etc.
+ Les méthodes probabilistes (introduisent une incertitude en altérant les valeurs initiales)
  - micro-agrégation, ajout de bruits, permutation de lignes, etc.

Dans certaines situations, il est possible d'appliquer des méthodes ad-hoc pour répondre à un besoin spécifique de l'arbitrage risque-utilité du jeu de données concerné.

## 1. Importation de l'object `sdcMicro`

```{r}
#| eval: true
#| warning: false
#| message: false

library(sdcMicro)
library(dplyr)
library(labelled)
library(agrisvyr)

purrr::walk(file.path("../_R",list.files(path="../_R",pattern = ".R$")),source)

```

```{r}
#| eval: true
obj_{{file_attributes$file_name}}=readRDS(file.path("../","{{agrisvy@SdcObjDir}}",
"obj_{{file_attributes$file_name}}.rds"))

obj_{{file_attributes$file_name}}_in=obj_{{file_attributes$file_name}}
```

## Application des méthodes non-probabilistes

### Recodage global

**Intuition**: Combine plusieurs catégories d'une variable pour former une nouvelle catégorie (plus générales) résultant ainsi à une nouvelle variables avec moins de catégories (détails)

`groupAndRename(obj, var, before, after, addNA = FALSE)`

```{r}
#| eval: false
groupAndRename(obj=obj_{{file_attributes$file_name}}, var=, before=, after=, addNA = FALSE)
```

`globalRecode(sdc, column="water", breaks=3)`

```{r}
#| eval: false
globalRecode(obj=obj_{{file_attributes$file_name}}, column=, breaks=)
table(get.sdcMicroObj(obj=obj_{{file_attributes$file_name}}, type="manipKeyVars")$var)
```

### codage au top

`topBotCoding(obj, value, replacement, kind = "top", column = NULL)
`
```{r}
#| eval: false
topBotCoding(obj=sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}})
, value, replacement, kind = "top", column = )

```

### Supression locale

**Intuition**: remplacées des catégories par des valeurs manquantes l'objectif étant d'éliminer les combinaisons à risque en augmentant le nombre d'enregistrements correspondant à chaque combinaison de valeurs clés.

`localSuppression(obj, k = 2, importance = NULL, combs = NULL, ...)`

`kAnon(obj, k = 2, importance = NULL, combs = NULL, ...)`

```{r}
#| eval: false

localSuppression(obj=obj_{{file_attributes$file_name}}, k = 2)
sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}})
undolast(obj_{{file_attributes$file_name}})
localSuppression(obj=obj_{{file_attributes$file_name}}, k = 2,importance=)
sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}})

```

## Application des méthodes probabilistes

### Micro-aggregation

**Intuition**: autorisent la publication
des ensembles de microdonnées si les enregistrements correspondent à des groupes de k individus ou plus, où aucun individu ne domine (c'est-à-dire ne contribue trop) au groupe et où k est une valeur seuil.

```{r}
#| eval: false

microaggregation(
  obj=sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}}),
  variables = NULL,
  aggr = 3,
  strata_variables = NULL,
  method = "mdav",
  weights = NULL,
  nc = 8,
  clustermethod = "clara",
  measure = "mean",
  trim = 0,
  varsort = 1,
  transf = "log"
)
```

### Ajout de bruit

**Intuition**: Ajouter ou la soustraires de (petites) valeurs aux valeurs initiales d'une variable.L'avantage de l'ajout de bruit est que le bruit est généralement continu avec une moyenne nulle et qu'il n'est pas possible d'obtenir une correspondance exacte avec des fichiers externes.

`addNoise(obj, variables = NULL, noise = 150, method = "additive", ...)
`

```{r}
#| eval: false

addNoise(obj=sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}})
, variables = , noise = 150, method = "additive")

```

### Pste-randomisation (PRAM)

**Intuition**: forme de d'erreur de classification intentionnelle, à l'aide d'un mécanisme de probabilité connu et prédéterminé. L'application du PRAM signifie que, pour chaque enregistrement d'un fichier de microdonnées, le score d'une ou de plusieurs variables catégorielles est modifié avec une certaine probabilité. Cette opération est effectuée indépendamment pour chacun des enregistrements

```{r}
#| eval: false
pram(obj=sdcMicro::plot.localSuppression(obj_{{file_attributes$file_name}})
, variables = , strata_variables = NULL, pd = 0.8, alpha = 0.5)

```

### Permutation par rang (Rank swapping)

**Intuition**: les valeurs d'une variable Xi sont classées par ordre croissant
par ordre croissant, puis chaque valeur classée de Xi est remplacée par une autre valeur classée
choisie au hasard dans une fourchette restreinte (par exemple, le rang de deux valeurs permutées ne peut pas différer de plus de p% du nombre total d'enregistrements, où p est un paramètre d'entrée).
Cet algorithme est utilisé indépendamment sur chaque variable de l'ensemble de données original

```{r}
#| eval: false

data(testdata2)

sdc <- createSdcObj(
  dat = testdata2,
  keyVars = c("urbrur", "roof", "walls", "water", "electcon", "relat", "sex"),
  numVars = c("expend", "income", "savings"),
  w = "sampling_weight")
sdc <- rankSwap(sdc)

```
### Methodes de réarrangement des données (data shuffling)

**Intuition**: type particulier de permutation des données continues ou ordinales qui garantit que les distributions marginales dans les ensembles de données réarrangées seront exactement les mêmes que les distributions marginales dans les données originales.

```{r}
#| eval: false

data(testdata2)
sdc <- createSdcObj(testdata2,
  keyVars=c('urbrur','roof','walls','water','electcon','relat','sex'),
  numVars=c('expend','income','savings'), w='sampling_weight')

sdc <- shuffle(sdc, method=c('ds'),regmethod= c('lm'), covmethod=c('spearman'),
		form=savings+expend ~ urbrur+walls)

```

## Extraction de la base anonymisée

```{r}
#| eval: true

donnee_ano=extractManipData(obj_{{file_attributes$file_name}})

```

## Mettre à jour le rapport d'anonymization

```{r}
#| eval: true
obj_{{file_attributes$file_name}}_fin=obj_{{file_attributes$file_name}}
saveReprtObj(
  agrisvy={{paste0(obj_name)}},
  intialObj = obj_{{file_attributes$file_name}}_in,
  finalObj = obj_{{file_attributes$file_name}}_fin,
  unit = "{{file_attributes$file_name}}",
  hierarchy = NULL,
  global = TRUE,
  individual = TRUE,
  suda = FALSE,
  hierarchical = FALSE,
  childName = "{{file_attributes$file_name}}"
)

```

## Post-traitement des données

```{r}
#| eval: false

```

## Sauvegrder la base anonymisée

```{r}
#| eval: true

haven::write_dta(donnee_ano,file.path("../","{{anoDataDir(agrisvy)}}",
"{{file_attributes$file_name}}_ano.dta"))

```
