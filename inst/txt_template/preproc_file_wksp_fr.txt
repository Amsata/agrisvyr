---
title: "{{agrisvy@wkspName}}"
title-block-banner: true
subtitle: "{{agrisvy@subtitle}}"
author: "{{agrisvy@organizer}}"
abstract: |
  This is the abstract.
format: pdf
editor: visual
---

# Pré-traitement de la base {{file_attributes$msg}}

Le travail "donnée" de la diffusion des microdonnées ne se limite pas seulement au contrôle de divulgation des microdonnées. Il s'agit de mettre à la disposition du public des microdonnées présentables, faciles à utiliser et anonyme. C'est la raison pour laquelle, avant de passer au contrôle de divulgation, il faudra s'assurer que les microdonnées sont correctent (il y a pas de duplication, toutes les variables ainsi que les valeurs des variables catégoriques sont labélisées, les types des variables sont correctes).

La partie pré-traitement avant anonymization consiste à faire tous les traitement nécessaire pour s'assurer les microdonnées sont présentables. Ce travail inclut mais ,sans s'y limiter, à :

-   gérer les duplication,

-   enlever les variables qui ne doivent pas être diffusées,

-   renommer des variables,

-   amener des variables d'autre jeux de données,

-   convertir des variables à d'autres types


```{r}
#| eval: true
#| include: false
#| warning: false

library(dplyr)
library(agrisvyr)
library(tidyr)
library(questionr)
library(labelled)
library(readxl)
library(tidyr)
library(haven)

purrr::walk(file.path("../_R",list.files(path="../_R",pattern = ".R$")),source)
```

## 1. Lecture du jeux de données

-   `haven::read_dta(chemin_donnee)` : lecture d'un fichier Stata

-   `haven::read_sav(chemin_donnee)`: lecture d'un fichier SPSS
{{deparse(substitute(agrisvy))}}

```{r}
#| eval: true
donnee=read_dta(file.path(data_path,"{{file_attributes$path}}"))

head(donnee)

```

```{r}
#| eval: false

variable_classification=
read_excel(path=file.path("../","{{file_attributes$xlsx_var_class}}"),
                                   sheet ="{{file_attributes$file_name}}") %>%
                                   select(Name:Questions)


head(variable_classification)

```


## 2. Amener des variables d'autres jeux de données

```{r}

```

## 3. Verifier les duplications

agrisyrr::is_id(donnee,var1,var2)

**Travail à faire**

Vérifier s'il ya des duplications dans le jeux de données

```{r}

```

## 4. Suppression des variables à ne pas diffuser

`donnee=dplyr::select(donnee,-var1,-var2,-var3)`: suprimmer les variables `var1`, `var2` et `var3`

`variable_a_suprimmer=c("var1","var2","var3")` puis

`donnee=dplyr::select(donnee,-all_off(variable_a_suprimmer)`

**Travail à faire**

Supprimer les variables qui ne doivent pas être diffusées


```{r}
#| eval: false
vars_a_supp=variable_classification %>% filter(Classification %in% c("DI","D"))
%>% pull(Name)

vars_a_supp=vars_a_supp[!is.na(vars_a_supp)]
vars_a_supp

donnee=dplyr::select(-all_of(vars_a_supp))
```

## 5. Conversion de type

`donnee=dplyr::mutate(var=labelled::to_character(var))` : convertir une variable en texte (string, character)

`donnee=dplyr::mutate(donnee,var=to_labelled(var))` : convertir une variable de type text ou factor en haven_labelled.

`donnee=dplyr::mutate(donnee,var=to_factor(var))` : convertir une variable en factor

`donnee=agrisvyr::to_numeric(donnee,var)`: permet de garder le label de la variable en même temps

**Travail à faire**

Vérifier les type des données et faire des conversion si necessaire

```{r}
#| eval: false

donnee=dplyr::mutate(donnee)

```

## 6. Renomage de variable

`donnee=dplyr::rename(nouveau_nom=ancien_nom)`

```{r}
#| eval: false

donnee=dplyr::rename(donnee)
```

## 7. Labélisation de variables

`donnee=labelled::set_variable_labels(donnee,var="label de la variable")`

```{r}
#| eval: false

donnee=labelled::set_variable_labels(donnee)
```

## 8. Labélisation de valeurs

`donnee=set_value_labels(donnee,var=c(valeur1="label val 1", valeur2="label val 2",…)`

```{r}
#| eval: false

donnee=labelled::set_value_labels(donnee)

```

## 9. Dernière vérification

`labelled::look_for(donnee)`

```{r}
#| eval: false

labelled::look_for(donnee)

```

## 10. Sauvegarder les données traitées

`haven::write_dta(donnee,chemin)`

`haven::write_sav(donnee,chemin)`

```{r}
#| eval: true

haven::write_dta(donnee,
file.path("../",
"{{file_attributes$to_save}}"))
```

## Conclusion

A cette étape, les données sont prêtes à être diffusées, sauf que la confidentialité des répondants n'est pas encore completement protégée par **des techniques de contrôle de divulgation des données**.
